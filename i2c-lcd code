#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_NeoPixel.h> // Adiciona a biblioteca NeoPixel

// #include <math.h> // Descomente se for usar round() para o aluguel

// --- Configurações da Fita NeoPixel ---
#define LED_PIN    3  // Pino do Arduino conectado à fita de LED
#define LEDS_PER_HOUSE 3 // LEDs que acenderão por casa do tabuleiro
const int numCasas = 24;
const int LED_COUNT = 80; // Máximo de LEDs na fita do usuário (24*3=72 para casas + 8 extras)

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);
// ------------------------------------

LiquidCrystal_I2C lcd(0x27, 20, 4); // LCD 20x4

int numJogadores = 0;
int posicaoJogador[4] = {0, 0, 0, 0};
int saldoJogador[4] = {1000, 1000, 1000, 1000};
bool preso[4] = {false, false, false, false};
int turnosPreso[4] = {0, 0, 0, 0};
int jogadorAtual = 0;
bool ativo[4] = {false, false, false, false};

int numeroCasasConstruidas[numCasas];
int donoCasa[numCasas];

const int BOTAO_AVANCAR_NAO_COMPRAR = 7;
const int BOTAO_COMPRAR_SIM = 9;         // Pino 9 para Comprar/Sim e Confirmar Jogadores
const int BOTAO_SELECIONA_JOGADOR = 12;   // Pino 12 para Selecionar Jogadores

uint32_t coresJogadores[4];

void configurarJogadores();
String nomeCasa(int pos);
void eventoEspecial(int jogador);
void mostrarEventoEspecial();
bool perguntarCompra(int jogador, int casa);
void tentarConstruir(int jogador, int casa);
void eventoDaCasa(int jogador, int posNova);
void verificarStatusJogador(int jogador);
bool verificarVencedor();
void esperarBotaoAvancar();
void mostrarTodasPosicoesJogadoresLed();

// PREÇOS DAS CASAS MODIFICADOS CONFORME SOLICITADO
int precoCasa[numCasas] = {
  0,  80,  80, 120,   0, 100,   0, 100, 140, 160, 200, 220, // Índices 0-11
  0, 260, 500, 300, 320,   0,   0, 360, 380, 400, 400, 450  // Índices 12-23
};

String textoEvento = "";
String textoEventoLinha2 = "";
String textoEventoLinha3 = "";

// --- FUNÇÃO DE ESPERA PARA PINO 7 (COM DEPURAÇÃO) ---
void esperarBotaoAvancar() {
  Serial.println("DEBUG_P7: Entrou em esperarBotaoAvancar().");
  unsigned long startDebounce = 0;
  bool currentButtonState = digitalRead(BOTAO_AVANCAR_NAO_COMPRAR);
  bool lastButtonState = currentButtonState;
  unsigned long lastDebugPrintTime = millis();

  Serial.print("DEBUG_P7: Estado inicial do botao (P7): ");
  Serial.println(currentButtonState == HIGH ? "HIGH (solto)" : "LOW (pressionado)");

  while (true) {
    currentButtonState = digitalRead(BOTAO_AVANCAR_NAO_COMPRAR);

    if (currentButtonState != lastButtonState) {
      Serial.print("DEBUG_P7: Mudanca de estado! Anterior: ");
      Serial.print(lastButtonState == HIGH ? "HIGH" : "LOW");
      Serial.print(", Atual: ");
      Serial.println(currentButtonState == HIGH ? "HIGH" : "LOW");

      if (lastButtonState == HIGH && currentButtonState == LOW) {
        startDebounce = millis();
        Serial.println("DEBUG_P7: Botao Pressionado (H->L). Debounce timer iniciado.");
      }

      if (lastButtonState == LOW && currentButtonState == HIGH) {
        unsigned long tempoDecorrido = millis() - startDebounce;
        Serial.print("DEBUG_P7: Botao Solto (L->H). Tempo desde debounce: ");
        Serial.print(tempoDecorrido);
        Serial.println("ms");
        if ( tempoDecorrido > 50) {
          Serial.println("DEBUG_P7: Debounce OK. Saindo de esperarBotaoAvancar().");
          return;
        } else {
          Serial.println("DEBUG_P7: Debounce FALHOU (muito rapido). Continuando a esperar.");
        }
      }
    }
    lastButtonState = currentButtonState;

    if (millis() - lastDebugPrintTime > 1000) {
        Serial.print("DEBUG_P7: ...esperando... Estado atual do botao (P7): ");
        Serial.println(digitalRead(BOTAO_AVANCAR_NAO_COMPRAR) == HIGH ? "HIGH (solto)" : "LOW (pressionado)");
        lastDebugPrintTime = millis();
    }
    delay(10);
  }
}
// --- FIM DA FUNÇÃO DE ESPERA PARA PINO 7 ---

// ----- FUNÇÃO configurarJogadores REVISADA E CORRIGIDA -----
void configurarJogadores() {
  int jogadoresCandidatos = 1;
  bool confirmado = false;
  const long debounceDelay = 50;

  unsigned long lastDebounceTimeSelecao = 0;
  bool lastRawStateSelecao = HIGH;
  bool acionamentoSelecaoFeito = false;

  unsigned long lastDebounceTimeConfirmacao = 0;
  bool lastRawStateConfirmacao = HIGH;
  bool lastSteadyStateConfirmacao = HIGH;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Num. Jogadores:");
  lcd.setCursor(0, 2);
  lcd.print("P12:Muda / P9:OK  ");

  while (!confirmado) {
    lcd.setCursor(8, 1);
    lcd.print(jogadoresCandidatos);
    lcd.print(" ");

    bool currentRawStateSelecao = digitalRead(BOTAO_SELECIONA_JOGADOR); // Pino 12
    if (currentRawStateSelecao != lastRawStateSelecao) {
      lastDebounceTimeSelecao = millis();
    }
    if ((millis() - lastDebounceTimeSelecao) > debounceDelay) {
      if (currentRawStateSelecao == LOW && !acionamentoSelecaoFeito) {
        jogadoresCandidatos++;
        if (jogadoresCandidatos > 4) {
          jogadoresCandidatos = 1;
        }
        Serial.print("DEBUG_CFG: Pino 12 Pressionado. Jogadores candidatos: ");
        Serial.println(jogadoresCandidatos);
        acionamentoSelecaoFeito = true;
      } else if (currentRawStateSelecao == HIGH) {
        acionamentoSelecaoFeito = false;
      }
    }
    lastRawStateSelecao = currentRawStateSelecao;

    bool currentRawStateConfirmacao = digitalRead(BOTAO_COMPRAR_SIM); // Pino 9 usado para confirmar
    if (currentRawStateConfirmacao != lastRawStateConfirmacao) {
      lastDebounceTimeConfirmacao = millis();
    }
    if ((millis() - lastDebounceTimeConfirmacao) > debounceDelay) {
      if (currentRawStateConfirmacao != lastSteadyStateConfirmacao && currentRawStateConfirmacao == LOW) {
        numJogadores = jogadoresCandidatos;
        confirmado = true;
        Serial.print("DEBUG_CFG: Pino 9 Pressionado. Jogadores confirmados: ");
        Serial.println(numJogadores);
      }
      lastSteadyStateConfirmacao = currentRawStateConfirmacao;
    }
    lastRawStateConfirmacao = currentRawStateConfirmacao;

    delay(20);
  }

  for (int i = 0; i < numJogadores; i++) {
    ativo[i] = true;
    posicaoJogador[i] = 0;
    saldoJogador[i] = 1000;
    preso[i] = false;
    turnosPreso[i] = 0;
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Jogadores:");
  lcd.setCursor(0, 1);
  lcd.print(numJogadores);
  lcd.setCursor(0, 2);
  lcd.print("Confirmado!");
  lcd.setCursor(0, 3);
  lcd.print("Avancar (P7)    ");

  esperarBotaoAvancar();
}
// ----- FIM DA FUNÇÃO configurarJogadores -----

// ----- FUNÇÃO PARA ATUALIZAR LEDS NeoPixel MODIFICADA -----
void mostrarTodasPosicoesJogadoresLed() {
  strip.clear();

  for (int j = 0; j < numJogadores; j++) {
    if (ativo[j]) {
      int casaIndex = posicaoJogador[j];
      if (casaIndex < 0 || casaIndex >= numCasas) continue;

      int startLedIndex = casaIndex * LEDS_PER_HOUSE;

      for (int i = 0; i < LEDS_PER_HOUSE; i++) {
        int currentLed = startLedIndex + i;
        if (currentLed < LED_COUNT) {
          strip.setPixelColor(currentLed, coresJogadores[j]);
        } else {
          break;
        }
      }

      if (casaIndex == (numCasas - 1)) {
        int ledsTabuleiro = numCasas * LEDS_PER_HOUSE;
        for (int k = ledsTabuleiro; k < LED_COUNT; k++) {
          strip.setPixelColor(k, coresJogadores[j]);
        }
        // Serial.print("DEBUG_LED: Jogador "); Serial.print(j+1);
        // Serial.print(" na ultima casa! Acendendo LEDs extras de ");
        // Serial.print(ledsTabuleiro); Serial.print(" a "); Serial.println(LED_COUNT-1);
      }
    }
  }
  strip.show();
}
// ----- FIM DA FUNÇÃO NeoPixel -----


String nomeCasa(int pos) {
  switch (pos) {
    case 0:  return "Inicio";
    case 1:  return "Santo Amaro";
    case 2:  return "Morro Conceicao";
    case 3:  return "Encruzilhada";
    case 4:  return "Sorte ou Reves";
    case 5:  return "Iputinga";
    case 6:  return "Va para Jaula";
    case 7:  return "Mustardinha";
    case 8:  return "Afogados";
    case 9:  return "Caxanga";
    case 10: return "Derby";
    case 11: return "Casa Amarela";
    case 12: return "Feriado";
    case 13: return "Gracas";
    case 14: return "Companhia Eletrica";
    case 15: return "Jaqueira";
    case 16: return "Casa Forte";
    case 17: return "Sorte ou Reves";
    case 18: return "Jaula";
    case 19: return "Poco da Panela";
    case 20: return "Pina";
    case 21: return "Setubal";
    case 22: return "Metro";
    case 23: return "Boa Viagem";
    default: return "Invalida";
  }
}

void addDinheiro(int jogador, int valor) {
  saldoJogador[jogador] += valor;
}

void removeDinheiro(int jogador, int valor) {
  saldoJogador[jogador] -= valor;
}

void verificarStatusJogador(int jogador) {
  if (ativo[jogador] && saldoJogador[jogador] < 0) {
    ativo[jogador] = false;
    for (int i = 0; i < numCasas; i++) {
      if (donoCasa[i] == jogador) {
        donoCasa[i] = -1;
        numeroCasasConstruidas[i] = 0;
      }
    }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("J");
    lcd.print(jogador + 1);
    lcd.print(" ELIMINADO!");
    lcd.setCursor(0, 1);
    lcd.print("Saldo Negativo.");
    Serial.print("Jogador ");
    Serial.print(jogador + 1);
    Serial.println(" foi eliminado por saldo negativo.");
    esperarBotaoAvancar();
    mostrarTodasPosicoesJogadoresLed();
  }
}

bool verificarVencedor() {
  for (int i = 0; i < numJogadores; i++) {
    if (ativo[i] && saldoJogador[i] >= 3000) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("JOGADOR ");
        lcd.print(i + 1);
        lcd.print(" VENCEU");
        lcd.setCursor(0, 1);
        lcd.print("Riqueza >= 3000!");
        Serial.print("Jogador ");
        Serial.print(i + 1);
        Serial.println(" venceu com saldo >= 3000.");
        for(int k=0; k<5; k++){
            for(int l=0; l<LED_COUNT; l++) strip.setPixelColor(l, coresJogadores[i]);
            strip.show(); delay(200);
            strip.clear(); strip.show(); delay(200);
        }
        for(int l=0; l<LED_COUNT; l++) strip.setPixelColor(l, coresJogadores[i]);
        strip.show();
        esperarBotaoAvancar();
        return true;
    }
  }
  int countAtivos = 0;
  int ultimoAtivo = -1;
  for (int i = 0; i < numJogadores; i++) {
    if (ativo[i]) {
      countAtivos++;
      ultimoAtivo = i;
    }
  }
  if (numJogadores > 0 && countAtivos == 1 && ativo[ultimoAtivo]) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("JOGADOR ");
    lcd.print(ultimoAtivo + 1);
    lcd.print(" VENCEU");
    lcd.setCursor(0, 1);
    lcd.print("Ultimo de pe!");
    Serial.print("Jogador ");
    Serial.print(ultimoAtivo + 1);
    Serial.println(" venceu por ser o ultimo ativo.");
    for(int k=0; k<5; k++){
        for(int l=0; l<LED_COUNT; l++) strip.setPixelColor(l, coresJogadores[ultimoAtivo]);
        strip.show(); delay(200);
        strip.clear(); strip.show(); delay(200);
    }
    for(int l=0; l<LED_COUNT; l++) strip.setPixelColor(l, coresJogadores[ultimoAtivo]);
    strip.show();
    esperarBotaoAvancar();
    return true;
  }
  return false;
}

void eventoEspecial(int jogador) {
  const int numEventos = 20;
  int sorteio = random(0, numEventos);
  textoEvento = "";
  textoEventoLinha2 = "";
  textoEventoLinha3 = "";
  switch (sorteio) {
    case 0: removeDinheiro(jogador, 200); textoEvento = "Reves:"; textoEventoLinha2 = "-200 R$"; break;
    case 1: removeDinheiro(jogador, 150); textoEvento = "Reves:"; textoEventoLinha2 = "-150 R$"; break;
    case 2: { int totalReceber = 0; for (int i = 0; i < numJogadores; i++) { if (i != jogador && ativo[i]) { removeDinheiro(i, 120); verificarStatusJogador(i); totalReceber += 120; } } addDinheiro(jogador, totalReceber); textoEvento = "Sorte:"; textoEventoLinha2 = "Outros te pagam"; textoEventoLinha3 = "120 R$ cada"; break; }
    case 3: { int totalReceber = 0; for (int i = 0; i < numJogadores; i++) { if (i != jogador && ativo[i]) { removeDinheiro(i, 80); verificarStatusJogador(i); totalReceber += 80; } } addDinheiro(jogador, totalReceber); textoEvento = "Sorte:"; textoEventoLinha2 = "Outros te pagam"; textoEventoLinha3 = "80 R$ cada"; break; }
    case 4: addDinheiro(jogador, 650); textoEvento = "Sorte:"; textoEventoLinha2 = "Recebe +650 R$"; break;
    case 5: removeDinheiro(jogador, 200); textoEvento = "Reves:"; textoEventoLinha2 = "-200 R$"; break;
    case 6:
      preso[jogador] = true;
      turnosPreso[jogador] = 1;
      posicaoJogador[jogador] = 18;
      textoEvento = "Reves:";
      textoEventoLinha2 = "Va para Jaula!";
      textoEventoLinha3 = "(Pos.18) 1 turno";
      break;
    case 7: removeDinheiro(jogador, 550); textoEvento = "Reves:"; textoEventoLinha2 = "-550 R$"; break;
    case 8: addDinheiro(jogador, 1000); textoEvento = "Sorte:"; textoEventoLinha2 = "Ganha +1000 R$"; break;
    case 9: addDinheiro(jogador, 500); textoEvento = "Sorte:"; textoEventoLinha2 = "Ganha +500 R$"; break;
    case 10: removeDinheiro(jogador, 200); textoEvento = "Reves:"; textoEventoLinha2 = "-200 R$"; break;
    case 11: removeDinheiro(jogador, 150); textoEvento = "Reves:"; textoEventoLinha2 = "-150 R$"; break;
    case 12: { int totalReceber = 0; for (int i = 0; i < numJogadores; i++) { if (i != jogador && ativo[i]) { removeDinheiro(i, 100); verificarStatusJogador(i); totalReceber += 100; } } addDinheiro(jogador, totalReceber); textoEvento = "Sorte:"; textoEventoLinha2 = "Outros te pagam"; textoEventoLinha3 = "100 R$ cada"; break; }
    case 13: removeDinheiro(jogador, 80); textoEvento = "Reves:"; textoEventoLinha2 = "-80 R$"; break;
    case 14: removeDinheiro(jogador, 600); textoEvento = "Reves:"; textoEventoLinha2 = "-600 R$"; break;
    case 15: posicaoJogador[jogador] = (posicaoJogador[jogador] + 3 + numCasas) % numCasas; textoEvento = "Sorte:"; textoEventoLinha2 = "Ande 3 casas"; break;
    case 16: addDinheiro(jogador, 100); textoEvento = "Sorte:"; textoEventoLinha2 = "+100 R$"; break;
    case 17: posicaoJogador[jogador] = (posicaoJogador[jogador] + 5 + numCasas) % numCasas; textoEvento = "Sorte:"; textoEventoLinha2 = "Ande 5 casas"; break;
    case 18: removeDinheiro(jogador, 120); textoEvento = "Reves:"; textoEventoLinha2 = "-120 R$"; break;
    case 19: posicaoJogador[jogador] = (posicaoJogador[jogador] + 5 + numCasas) % numCasas; textoEvento = "Sorte:"; textoEventoLinha2 = "Ande 5 casas"; break;
  }
}

void mostrarEventoEspecial() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(textoEvento);
  lcd.setCursor(0, 1);
  lcd.print(textoEventoLinha2);
  lcd.setCursor(0, 2);
  lcd.print(textoEventoLinha3);
  uint32_t corEvento = strip.Color(255,165,0);
  if(textoEvento.startsWith("Reves")) corEvento = strip.Color(100,0,0);
  else if (textoEvento.startsWith("Sorte")) corEvento = strip.Color(0,100,0);

  for(int k=0; k<3; k++){
      for(int l=0; l<LED_COUNT; l+=2) strip.setPixelColor(l, corEvento);
      strip.show(); delay(150);
      strip.clear(); strip.show(); delay(150);
  }
  mostrarTodasPosicoesJogadoresLed();
  esperarBotaoAvancar();
}

bool perguntarCompra(int jogador, int casa) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("J");
  lcd.print(jogador + 1);
  lcd.print(", Comprar?");
  lcd.setCursor(0, 1);
  String nome = nomeCasa(casa);
  lcd.print(nome.substring(0, 19));
  lcd.setCursor(0, 2);
  lcd.print("Preco: R$");
  lcd.print(precoCasa[casa]);
  lcd.setCursor(0, 3);
  lcd.print("Sim(P9) Nao(P7)   ");
  Serial.println("Jogador " + String(jogador + 1) + " em " + nomeCasa(casa) + ", preco R$" + String(precoCasa[casa]) + ".");
  Serial.println("Comprar? (Botao Pino9=SIM, Botao Pino7=NAO)");
  unsigned long startDebounceSim = 0;
  bool buttonStateSim = HIGH;
  bool lastButtonStateSim = HIGH;
  unsigned long startDebounceNao = 0;
  bool buttonStateNao = HIGH;
  bool lastButtonStateNao = HIGH;

  while (true) {
    lastButtonStateSim = buttonStateSim;
    buttonStateSim = digitalRead(BOTAO_COMPRAR_SIM); 
    if (lastButtonStateSim == HIGH && buttonStateSim == LOW) startDebounceSim = millis();
    if (lastButtonStateSim == LOW && buttonStateSim == HIGH && (millis() - startDebounceSim) > 50) {
        if (saldoJogador[jogador] >= precoCasa[casa]) {
            removeDinheiro(jogador, precoCasa[casa]);
            donoCasa[casa] = jogador;
            numeroCasasConstruidas[casa] = 0;
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Casa Comprada!");
            lcd.setCursor(0, 1);
            lcd.print(nome.substring(0,19));
            for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(casa*LEDS_PER_HOUSE + i, coresJogadores[jogador]);
            strip.show();
            delay(500);
            esperarBotaoAvancar();
            return true;
        } else {
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Saldo Insufic.");
            esperarBotaoAvancar();
            return false;
        }
    }
    lastButtonStateNao = buttonStateNao;
    buttonStateNao = digitalRead(BOTAO_AVANCAR_NAO_COMPRAR);
    if (lastButtonStateNao == HIGH && buttonStateNao == LOW) startDebounceNao = millis();
    if (lastButtonStateNao == LOW && buttonStateNao == HIGH && (millis() - startDebounceNao) > 50) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Compra Recusada.");
        esperarBotaoAvancar();
        return false;
    }
    delay(10);
  }
}

void tentarConstruir(int jogador, int casa) {
  if (donoCasa[casa] != jogador) return;
  if (numeroCasasConstruidas[casa] >= 4) {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Max. Construcoes");
    lcd.setCursor(0,1);
    lcd.print(nomeCasa(casa).substring(0,19));
    esperarBotaoAvancar();
    return;
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("J");
  lcd.print(jogador + 1);
  lcd.print(", Construir em");
  lcd.setCursor(0, 1);
  String nome = nomeCasa(casa);
  lcd.print(nome.substring(0, 19));
  lcd.setCursor(0, 2);
  if (numeroCasasConstruidas[casa] < 3)
    lcd.print("Casinha ");
  else
    lcd.print("Mansao ");
  lcd.print("40R$?");
  lcd.setCursor(0, 3);
  lcd.print("Sim(P9) Nao(P7)   ");
  Serial.println("Jogador " + String(jogador + 1) + " pode construir em " + nomeCasa(casa) + ".");
  Serial.println("Preco: 40 R$. (Botao Pino9=SIM, Botao Pino7=NAO)");
  unsigned long tempoInicial = millis();
  bool respostaDada = false;
  unsigned long startDebounceSim = 0;
  bool buttonStateSim = HIGH;
  bool lastButtonStateSim = HIGH;
  unsigned long startDebounceNao = 0;
  bool buttonStateNao = HIGH;
  bool lastButtonStateNao = HIGH;

  while (((millis() - tempoInicial) < 15000) && !respostaDada) {
    lastButtonStateSim = buttonStateSim;
    buttonStateSim = digitalRead(BOTAO_COMPRAR_SIM); 
    if (lastButtonStateSim == HIGH && buttonStateSim == LOW) startDebounceSim = millis();
    if (lastButtonStateSim == LOW && buttonStateSim == HIGH && (millis() - startDebounceSim) > 50) {
        respostaDada = true;
        if (saldoJogador[jogador] >= 40) {
            removeDinheiro(jogador, 40);
            numeroCasasConstruidas[casa]++;
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Construcao OK!");
            lcd.setCursor(0, 1);
            if (numeroCasasConstruidas[casa] < 4)
              lcd.print(String(numeroCasasConstruidas[casa]) + " casinha(s)");
            else
              lcd.print("Mansao pronta!");
            for(int k=0; k<3; k++){
                for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(casa*LEDS_PER_HOUSE + i, coresJogadores[jogador]);
                strip.show(); delay(150);
                 for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(casa*LEDS_PER_HOUSE + i, strip.Color(0,0,0));
                strip.show(); delay(150);
            }
            for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(casa*LEDS_PER_HOUSE + i, coresJogadores[jogador]);
            strip.show();
            esperarBotaoAvancar();
            return;
        } else {
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Saldo Insufic.");
            esperarBotaoAvancar();
            return;
        }
    }
    lastButtonStateNao = buttonStateNao;
    buttonStateNao = digitalRead(BOTAO_AVANCAR_NAO_COMPRAR);
    if (lastButtonStateNao == HIGH && buttonStateNao == LOW) startDebounceNao = millis();
    if (lastButtonStateNao == LOW && buttonStateNao == HIGH && (millis() - startDebounceNao) > 50) {
        respostaDada = true;
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Nao construido.");
        esperarBotaoAvancar();
        return;
    }
    delay(10);
  }
  if (!respostaDada) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Tempo Esgotado.");
    lcd.setCursor(0,1);
    lcd.print("Nao construido.");
    esperarBotaoAvancar();
  }
}

void eventoDaCasa(int jogador, int posJogador) {
  String nomeDaCasaAtual = nomeCasa(posJogador);
  bool acaoDaCasaRealizadaOuTransferida = false;
  textoEvento = "";
  textoEventoLinha2 = "";
  textoEventoLinha3 = "";
  switch (posJogador) {
    case 0:
      textoEvento = "J" + String(jogador + 1) + " no Inicio";
      textoEventoLinha2 = "Bem-vindo de volta!";
      acaoDaCasaRealizadaOuTransferida = true;
      break;
    case 4: case 17:
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("J" + String(jogador+1) + " em");
      lcd.setCursor(0,1);
      lcd.print(nomeDaCasaAtual.substring(0,19));
      esperarBotaoAvancar();
      eventoEspecial(jogador);
      mostrarEventoEspecial();
      return;
    case 6:
      lcd.clear();
      lcd.setCursor(0,0); lcd.print("J" + String(jogador+1));
      lcd.setCursor(0,1); lcd.print("VAI PARA JAULA!");
      preso[jogador] = true;
      turnosPreso[jogador] = 1;
      posicaoJogador[jogador] = 18;
      lcd.setCursor(0,2); lcd.print("(Pos.18) 1 turno");
      esperarBotaoAvancar();
      return;
    case 18:
      if (!preso[jogador]) {
        textoEvento = "J" + String(jogador + 1);
        textoEventoLinha2 = "Visitando Jaula";
        textoEventoLinha3 = "Sem acao.";
      } else {
        textoEvento = "J" + String(jogador + 1);
        textoEventoLinha2 = "Na Jaula...";
        textoEventoLinha3 = "Turnos: " + String(turnosPreso[jogador]);
      }
      acaoDaCasaRealizadaOuTransferida = true;
      break;
    case 12:
        textoEvento = "J" + String(jogador + 1) + " em Feriado";
        textoEventoLinha2 = "Dia de Sorte!";
        addDinheiro(jogador, 100);
        textoEventoLinha3 = "Ganhou R$100";
        acaoDaCasaRealizadaOuTransferida = true;
        for(int k=0; k<3; k++){
            for(int l=0; l<LEDS_PER_HOUSE; l++) strip.setPixelColor(posJogador*LEDS_PER_HOUSE + l, strip.Color(255,223,0));
            strip.show(); delay(150);
            for(int l=0; l<LEDS_PER_HOUSE; l++) strip.setPixelColor(posJogador*LEDS_PER_HOUSE + l, strip.Color(0,0,0));
            strip.show(); delay(150);
        }
        break;
  }
  if (acaoDaCasaRealizadaOuTransferida) {
    lcd.clear();
    lcd.setCursor(0,0); lcd.print(textoEvento);
    lcd.setCursor(0,1); lcd.print(textoEventoLinha2);
    lcd.setCursor(0,2); lcd.print(textoEventoLinha3);
    esperarBotaoAvancar();
  } else if (precoCasa[posJogador] > 0) {
    if (donoCasa[posJogador] == -1) {
      perguntarCompra(jogador, posJogador);
    } else if (donoCasa[posJogador] != jogador) {
      int proprietario = donoCasa[posJogador];
      int casasConst = numeroCasasConstruidas[posJogador];
      int precoDaPropriedade = precoCasa[posJogador];
      float aluguelCalculado = 0.0f;
      aluguelCalculado = (float)precoDaPropriedade * 0.20f;
      if (casasConst == 1) {
          aluguelCalculado += (float)precoDaPropriedade * 0.05f;
      } else if (casasConst == 2) {
          aluguelCalculado += (float)precoDaPropriedade * 0.10f;
      } else if (casasConst == 3) {
          aluguelCalculado += (float)precoDaPropriedade * 0.15f;
          aluguelCalculado += (float)precoDaPropriedade * 0.10f;
      } else if (casasConst >= 4) {
          aluguelCalculado += (float)precoDaPropriedade * 0.20f;
          aluguelCalculado += (float)precoDaPropriedade * 0.10f;
      }
      int aluguelTotal = static_cast<int>(aluguelCalculado);
      if (precoDaPropriedade > 0 && aluguelTotal == 0 && aluguelCalculado > 0.0f) {
          aluguelTotal = 1;
      }
      textoEvento = "J" + String(jogador + 1) + " paga";
      textoEventoLinha2 = "Aluguel R$" + String(aluguelTotal);
      textoEventoLinha3 = "Para J" + String(proprietario + 1);
      lcd.clear();
      lcd.setCursor(0,0); lcd.print(textoEvento);
      lcd.setCursor(0,1); lcd.print(textoEventoLinha2);
      lcd.setCursor(0,2); lcd.print(textoEventoLinha3);
      uint32_t corPagamento = strip.Color(255,0,0);
      for(int k=0; k<2; k++){
          for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(posJogador*LEDS_PER_HOUSE + i, corPagamento);
          strip.show(); delay(200);
           for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(posJogador*LEDS_PER_HOUSE + i, strip.Color(0,0,0));
          strip.show(); delay(200);
      }
      removeDinheiro(jogador, aluguelTotal);
      addDinheiro(proprietario, aluguelTotal);
      esperarBotaoAvancar();
    } else {
      tentarConstruir(jogador, posJogador);
    }
  } else if (precoCasa[posJogador] == 0 && !acaoDaCasaRealizadaOuTransferida) {
    lcd.clear();
    lcd.setCursor(0,0); lcd.print("J" + String(jogador+1) + " em");
    lcd.setCursor(0,1); lcd.print(nomeDaCasaAtual.substring(0,19));
    lcd.setCursor(0,2); lcd.print("Sem acao definida.");
    esperarBotaoAvancar();
  }
}

void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  randomSeed(analogRead(A0));

  pinMode(BOTAO_AVANCAR_NAO_COMPRAR, INPUT_PULLUP); // Pino 7
  pinMode(BOTAO_COMPRAR_SIM, INPUT_PULLUP);         // Pino 9
  pinMode(BOTAO_SELECIONA_JOGADOR, INPUT_PULLUP);   // Pino 12
  
  strip.begin();
  strip.setBrightness(50);
  strip.clear();
  strip.show();
  coresJogadores[0] = strip.Color(255, 0, 0);
  coresJogadores[1] = strip.Color(0, 255, 0);
  coresJogadores[2] = strip.Color(0, 0, 255);
  coresJogadores[3] = strip.Color(255, 255, 0);
  for (int i = 0; i < numCasas; i++) {
    donoCasa[i] = -1;
    numeroCasasConstruidas[i] = 0;
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Super Banco LCD");
  lcd.setCursor(0,1);
  lcd.print("Aperte Avancar(P7)");
  esperarBotaoAvancar();
  lcd.clear();
  Serial.println("Jogo Iniciado!");
  Serial.println("Botao Pino7: Avancar/Nao.");
  Serial.println("Botao Pino9: Sim/Comprar/Confirmar Jogadores."); 
  Serial.println("Botao Pino12: Selecionar Jogadores.");
}

void loop() {
  if (numJogadores == 0) { 
    configurarJogadores();
    if(numJogadores == 0) { 
        lcd.clear();
        lcd.print("Erro: Jogadores?");
        delay(2000);
        return;
    }
    for (int i = 0; i < numCasas; i++) {
        donoCasa[i] = -1;
        numeroCasasConstruidas[i] = 0;
    }
    jogadorAtual = 0;
    lcd.clear();
    lcd.print("Novo Jogo!");
    lcd.setCursor(0,1);
    lcd.print(String(numJogadores) + " Jogadores - J1 "); 
    mostrarTodasPosicoesJogadoresLed();
    esperarBotaoAvancar();
  }
  if (verificarVencedor()) {
    while (true) {
        lcd.noBacklight(); delay(300);
        lcd.backlight(); delay(300);
    }
  }
  if (!ativo[jogadorAtual]) {
    jogadorAtual = (jogadorAtual + 1) % numJogadores;
    return;
  }
  lcd.clear();
  if (preso[jogadorAtual]) {
    lcd.setCursor(0, 0);
    lcd.print("J");
    lcd.print(jogadorAtual + 1);
    lcd.print(" PRESO na Jaula");
    lcd.setCursor(0, 1);
    lcd.print("Turnos restantes:");
    lcd.print(turnosPreso[jogadorAtual]);
    lcd.setCursor(0, 2);
    lcd.print("Saldo: R$");
    lcd.print(saldoJogador[jogadorAtual]);
    mostrarTodasPosicoesJogadoresLed();
    esperarBotaoAvancar();
    turnosPreso[jogadorAtual]--;
    if (turnosPreso[jogadorAtual] <= 0) {
      preso[jogadorAtual] = false;
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("J" + String(jogadorAtual+1) + " esta livre!");
      lcd.setCursor(0,1);
      lcd.print("Jogara no prox.");
      esperarBotaoAvancar();
    }
    jogadorAtual = (jogadorAtual + 1) % numJogadores;
    return;
  }
  lcd.setCursor(0,0);
  lcd.print("Vez de J");
  lcd.print(jogadorAtual + 1);
  lcd.setCursor(0,1);
  lcd.print("Saldo: R$");
  lcd.print(saldoJogador[jogadorAtual]);
  lcd.setCursor(0,2);
  lcd.print("Pressione P7 para"); // MODIFICADO: Referência direta ao pino
  lcd.setCursor(0,3);
  lcd.print("jogar o dado...");
  mostrarTodasPosicoesJogadoresLed();
  esperarBotaoAvancar();
  int dado = random(1, 7);
  int posAnteriorNoTabuleiro = posicaoJogador[jogadorAtual];
  posicaoJogador[jogadorAtual] = (posicaoJogador[jogadorAtual] + dado) % numCasas;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("J");
  lcd.print(jogadorAtual + 1);
  lcd.print(" tirou ");
  lcd.print(dado);
  lcd.setCursor(0, 1);
  lcd.print("Foi para:");
  lcd.setCursor(0,2);
  lcd.print(nomeCasa(posicaoJogador[jogadorAtual]).substring(0,19));
  esperarBotaoAvancar();
  if (posAnteriorNoTabuleiro + dado >= numCasas && posicaoJogador[jogadorAtual] != 0) {
    addDinheiro(jogadorAtual, 200);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("J" + String(jogadorAtual+1) + " passou");
    lcd.setCursor(0,1);
    lcd.print("pelo INICIO!");
    lcd.setCursor(0,2);
    lcd.print("Recebeu +R$200");
    uint32_t corInicio = strip.Color(200,200,200);
    for(int k=0; k<2; k++){ 
        for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(0*LEDS_PER_HOUSE + i, corInicio);
        strip.show(); delay(100);
        for(int i=0; i<LEDS_PER_HOUSE; i++) strip.setPixelColor(0*LEDS_PER_HOUSE + i, strip.Color(0,0,0)); 
        strip.show(); delay(100);
    }
    esperarBotaoAvancar();
  }
  eventoDaCasa(jogadorAtual, posicaoJogador[jogadorAtual]);
  mostrarTodasPosicoesJogadoresLed();
  verificarStatusJogador(jogadorAtual);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Fim do turno: J");
  lcd.print(jogadorAtual + 1);
  lcd.setCursor(0, 1);
  String casaAtualStr = nomeCasa(posicaoJogador[jogadorAtual]);
  lcd.print(casaAtualStr.substring(0, 19));
  String s1="", s2="", s3="", s4="";
  if (numJogadores >=1 && ativo[0]) s1 = "J1:" + String(saldoJogador[0]); else if (numJogadores >=1) s1 = "J1: X ";
  if (numJogadores >=2 && ativo[1]) s2 = " J2:" + String(saldoJogador[1]); else if (numJogadores >=2) s2 = " J2: X ";
  if (numJogadores >=3 && ativo[2]) s3 = "J3:" + String(saldoJogador[2]); else if (numJogadores >=3) s3 = "J3: X ";
  if (numJogadores >=4 && ativo[3]) s4 = " J4:" + String(saldoJogador[3]); else if (numJogadores >=4) s4 = " J4: X ";
  lcd.setCursor(0, 2);
  lcd.print(s1.substring(0,9) + s2.substring(0,10));
  lcd.setCursor(0, 3);
  lcd.print(s3.substring(0,9) + s4.substring(0,10));
  esperarBotaoAvancar();
  jogadorAtual = (jogadorAtual + 1) % numJogadores; 
}
